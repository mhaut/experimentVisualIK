// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `JoystickAdapter.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____JoystickAdapter_h__
#define ____JoystickAdapter_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace RoboCompJoystickAdapter
{

class JoystickAdapter;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompJoystickAdapter::JoystickAdapter>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompJoystickAdapter::JoystickAdapter*);

}

}

namespace RoboCompJoystickAdapter
{

class JoystickAdapter;
bool operator==(const JoystickAdapter&, const JoystickAdapter&);
bool operator<(const JoystickAdapter&, const JoystickAdapter&);
::Ice::Object* upCast(::RoboCompJoystickAdapter::JoystickAdapter*);
typedef ::IceInternal::Handle< ::RoboCompJoystickAdapter::JoystickAdapter> JoystickAdapterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompJoystickAdapter::JoystickAdapter> JoystickAdapterPrx;
void __patch(JoystickAdapterPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompJoystickAdapter
{

struct AxisParams
{
    ::Ice::Float value;
    ::std::string name;

    bool operator==(const AxisParams& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(value != __rhs.value)
        {
            return false;
        }
        if(name != __rhs.name)
        {
            return false;
        }
        return true;
    }

    bool operator<(const AxisParams& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(value < __rhs.value)
        {
            return true;
        }
        else if(__rhs.value < value)
        {
            return false;
        }
        if(name < __rhs.name)
        {
            return true;
        }
        else if(__rhs.name < name)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const AxisParams& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const AxisParams& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const AxisParams& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const AxisParams& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct ButtonParams
{
    bool clicked;

    bool operator==(const ButtonParams& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(clicked != __rhs.clicked)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ButtonParams& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(clicked < __rhs.clicked)
        {
            return true;
        }
        else if(__rhs.clicked < clicked)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ButtonParams& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ButtonParams& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ButtonParams& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ButtonParams& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::RoboCompJoystickAdapter::AxisParams> AxisList;

typedef ::std::vector< ::RoboCompJoystickAdapter::ButtonParams> ButtonsList;

struct TData
{
    ::RoboCompJoystickAdapter::AxisList axes;
    ::RoboCompJoystickAdapter::ButtonsList buttons;
    ::Ice::Int velAxisIndex;
    ::Ice::Int dirAxisIndex;
    ::std::string id;

    bool operator==(const TData& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(axes != __rhs.axes)
        {
            return false;
        }
        if(buttons != __rhs.buttons)
        {
            return false;
        }
        if(velAxisIndex != __rhs.velAxisIndex)
        {
            return false;
        }
        if(dirAxisIndex != __rhs.dirAxisIndex)
        {
            return false;
        }
        if(id != __rhs.id)
        {
            return false;
        }
        return true;
    }

    bool operator<(const TData& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(axes < __rhs.axes)
        {
            return true;
        }
        else if(__rhs.axes < axes)
        {
            return false;
        }
        if(buttons < __rhs.buttons)
        {
            return true;
        }
        else if(__rhs.buttons < buttons)
        {
            return false;
        }
        if(velAxisIndex < __rhs.velAxisIndex)
        {
            return true;
        }
        else if(__rhs.velAxisIndex < velAxisIndex)
        {
            return false;
        }
        if(dirAxisIndex < __rhs.dirAxisIndex)
        {
            return true;
        }
        else if(__rhs.dirAxisIndex < dirAxisIndex)
        {
            return false;
        }
        if(id < __rhs.id)
        {
            return true;
        }
        else if(__rhs.id < id)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const TData& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const TData& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const TData& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const TData& __rhs) const
    {
        return !operator<(__rhs);
    }
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::RoboCompJoystickAdapter::AxisParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompJoystickAdapter::AxisParams, S>
{
    static void write(S* __os, const ::RoboCompJoystickAdapter::AxisParams& v)
    {
        __os->write(v.value);
        __os->write(v.name);
    }
};

template<class S>
struct StreamReader< ::RoboCompJoystickAdapter::AxisParams, S>
{
    static void read(S* __is, ::RoboCompJoystickAdapter::AxisParams& v)
    {
        __is->read(v.value);
        __is->read(v.name);
    }
};

template<>
struct StreamableTraits< ::RoboCompJoystickAdapter::ButtonParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::RoboCompJoystickAdapter::ButtonParams, S>
{
    static void write(S* __os, const ::RoboCompJoystickAdapter::ButtonParams& v)
    {
        __os->write(v.clicked);
    }
};

template<class S>
struct StreamReader< ::RoboCompJoystickAdapter::ButtonParams, S>
{
    static void read(S* __is, ::RoboCompJoystickAdapter::ButtonParams& v)
    {
        __is->read(v.clicked);
    }
};

template<>
struct StreamableTraits< ::RoboCompJoystickAdapter::TData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 11;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompJoystickAdapter::TData, S>
{
    static void write(S* __os, const ::RoboCompJoystickAdapter::TData& v)
    {
        __os->write(v.axes);
        __os->write(v.buttons);
        __os->write(v.velAxisIndex);
        __os->write(v.dirAxisIndex);
        __os->write(v.id);
    }
};

template<class S>
struct StreamReader< ::RoboCompJoystickAdapter::TData, S>
{
    static void read(S* __is, ::RoboCompJoystickAdapter::TData& v)
    {
        __is->read(v.axes);
        __is->read(v.buttons);
        __is->read(v.velAxisIndex);
        __is->read(v.dirAxisIndex);
        __is->read(v.id);
    }
};

}

namespace RoboCompJoystickAdapter
{

class Callback_JoystickAdapter_sendData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JoystickAdapter_sendData_Base> Callback_JoystickAdapter_sendDataPtr;

}

namespace IceProxy
{

namespace RoboCompJoystickAdapter
{

class JoystickAdapter : virtual public ::IceProxy::Ice::Object
{
public:

    void sendData(const ::RoboCompJoystickAdapter::TData& data)
    {
        sendData(data, 0);
    }
    void sendData(const ::RoboCompJoystickAdapter::TData& data, const ::Ice::Context& __ctx)
    {
        sendData(data, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sendData(const ::RoboCompJoystickAdapter::TData& data, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendData(data, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_sendData(const ::RoboCompJoystickAdapter::TData& data, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendData(data, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendData(const ::RoboCompJoystickAdapter::TData& data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendData(data, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendData(const ::RoboCompJoystickAdapter::TData& data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendData(data, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_sendData(const ::RoboCompJoystickAdapter::TData& data)
    {
        return begin_sendData(data, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendData(const ::RoboCompJoystickAdapter::TData& data, const ::Ice::Context& __ctx)
    {
        return begin_sendData(data, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendData(const ::RoboCompJoystickAdapter::TData& data, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendData(data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendData(const ::RoboCompJoystickAdapter::TData& data, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendData(data, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendData(const ::RoboCompJoystickAdapter::TData& data, const ::RoboCompJoystickAdapter::Callback_JoystickAdapter_sendDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendData(data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendData(const ::RoboCompJoystickAdapter::TData& data, const ::Ice::Context& __ctx, const ::RoboCompJoystickAdapter::Callback_JoystickAdapter_sendDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendData(data, &__ctx, __del, __cookie);
    }

    void end_sendData(const ::Ice::AsyncResultPtr&);
    
private:

    void sendData(const ::RoboCompJoystickAdapter::TData&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendData(const ::RoboCompJoystickAdapter::TData&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<JoystickAdapter> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<JoystickAdapter*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<JoystickAdapter> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<JoystickAdapter*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<JoystickAdapter> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<JoystickAdapter*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<JoystickAdapter> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<JoystickAdapter*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<JoystickAdapter> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<JoystickAdapter*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<JoystickAdapter> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<JoystickAdapter*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<JoystickAdapter> ice_secure(bool __secure) const
    {
        return dynamic_cast<JoystickAdapter*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<JoystickAdapter> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<JoystickAdapter*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<JoystickAdapter> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<JoystickAdapter*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<JoystickAdapter> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<JoystickAdapter*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<JoystickAdapter> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<JoystickAdapter*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<JoystickAdapter> ice_twoway() const
    {
        return dynamic_cast<JoystickAdapter*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<JoystickAdapter> ice_oneway() const
    {
        return dynamic_cast<JoystickAdapter*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<JoystickAdapter> ice_batchOneway() const
    {
        return dynamic_cast<JoystickAdapter*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<JoystickAdapter> ice_datagram() const
    {
        return dynamic_cast<JoystickAdapter*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<JoystickAdapter> ice_batchDatagram() const
    {
        return dynamic_cast<JoystickAdapter*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<JoystickAdapter> ice_compress(bool __compress) const
    {
        return dynamic_cast<JoystickAdapter*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<JoystickAdapter> ice_timeout(int __timeout) const
    {
        return dynamic_cast<JoystickAdapter*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<JoystickAdapter> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<JoystickAdapter*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<JoystickAdapter> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<JoystickAdapter*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace RoboCompJoystickAdapter
{

class JoystickAdapter : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void sendData(const ::RoboCompJoystickAdapter::TData&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace RoboCompJoystickAdapter
{

class JoystickAdapter : virtual public ::IceDelegate::RoboCompJoystickAdapter::JoystickAdapter,
                        virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void sendData(const ::RoboCompJoystickAdapter::TData&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace RoboCompJoystickAdapter
{

class JoystickAdapter : virtual public ::IceDelegate::RoboCompJoystickAdapter::JoystickAdapter,
                        virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void sendData(const ::RoboCompJoystickAdapter::TData&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace RoboCompJoystickAdapter
{

class JoystickAdapter : virtual public ::Ice::Object
{
public:

    typedef JoystickAdapterPrx ProxyType;
    typedef JoystickAdapterPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void sendData(const ::RoboCompJoystickAdapter::TData&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const JoystickAdapter& l, const JoystickAdapter& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const JoystickAdapter& l, const JoystickAdapter& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace RoboCompJoystickAdapter
{

template<class T>
class CallbackNC_JoystickAdapter_sendData : public Callback_JoystickAdapter_sendData_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_JoystickAdapter_sendData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_JoystickAdapter_sendDataPtr
newCallback_JoystickAdapter_sendData(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JoystickAdapter_sendData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JoystickAdapter_sendDataPtr
newCallback_JoystickAdapter_sendData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JoystickAdapter_sendData<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_JoystickAdapter_sendDataPtr
newCallback_JoystickAdapter_sendData(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JoystickAdapter_sendData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JoystickAdapter_sendDataPtr
newCallback_JoystickAdapter_sendData(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JoystickAdapter_sendData<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_JoystickAdapter_sendData : public Callback_JoystickAdapter_sendData_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_JoystickAdapter_sendData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_JoystickAdapter_sendDataPtr
newCallback_JoystickAdapter_sendData(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JoystickAdapter_sendData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JoystickAdapter_sendDataPtr
newCallback_JoystickAdapter_sendData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JoystickAdapter_sendData<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_JoystickAdapter_sendDataPtr
newCallback_JoystickAdapter_sendData(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JoystickAdapter_sendData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JoystickAdapter_sendDataPtr
newCallback_JoystickAdapter_sendData(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JoystickAdapter_sendData<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
